#!/usr/bin/env node
var express = require('express'),
  phantom = require('node-phantom'),
  program = require('commander'),
  fs = require('fs'),
  moment = require('moment'),
  config = require ('../config'),
  app = express(),
  staleTime = moment.duration(1, 'weeks'),
  configure,
  getContent,
  getFreshPage,
  fileIsStale,
  fileExists,
  writeToFile,
  formatFilename,
  respond;

program
  .usage('[options]')
  .option('-p, --port <port>', 'specify the port [8111]', Number, 8111)
  .option('-h, --host <hostname>', 'specify the hostname [http://clubjudge.com]', String, "http://clubjudge.com")
  .option('-t, --timeout <timeout (ms)>', 'specify the max timeout [10000]', Number, 10000)
  .option('-w, --writetofile <true|false>', 'enable saving of pages to files', Boolean, true)
  .option('-f, --folder <path/to/folder>', 'folder to write saved pages to', String, "./scrapes")
  .parse(process.argv);

configure = function() {
  if (config && config.folder) {
    program.folder = config.folder;
  }
};

writeToFile = function(filename, content) {
  console.log('Writing to file...');
  fs.writeFile(formatFilename(filename), content, function(err) {
    if (err) {
      console.log(err);
    } else {
      console.log('Saved ' + url + ' successfully');
    }
  });
};

fileExists = function(filename) {
  return fs.existsSync(formatFilename(filename));
};

fileIsStale = function(filename) {
  var stats = fs.statSync(filename);
  return (moment() > staleTime + moment(stats.mtime));
};

formatFilename = function(filename) {
  var cleanFilename,
    folder = program.folder;

  cleanFilename = filename
    .replace(/:\/\//gi, "_")
    .replace(/\//gi, "_")
    .replace(/\?/gi, "_")
    .replace(/&/gi, "_")
    .replace(/:/gi, "_");

  if (folder.substr(folder.length -1, folder.length) !== '/') {
    folder += '/';
  }

  return folder + cleanFilename;
};

getContent = function(url, callback) {
  var content = '';

  phantom.create(function(err, ph){
    return ph.createPage(function(err, page) {

      var lastReceived = new Date().getTime(),
        requestCount = 0,
        responseCount = 0,
        requestIds = [],
        startTime = new Date().getTime(),
        checkComplete,
        checkCompleteInterval;

      page.onConsoleMessage = function(msg, line, source) {
        console.log('page logs ' + source + ':' + line + ' - ' + msg);
      };

      page.onResourceRequested = function(request) {
        if(requestIds.indexOf(request.id) === -1) {
          requestIds.push(request.id);
          requestCount++;
        }
      };

      page.onResourceReceived = function(response) {
        if(requestIds.indexOf(response.id) !== -1) {
          lastReceived = new Date().getTime();
          responseCount++;
          requestIds[requestIds.indexOf(response.id)] = null;
        }
      };

      checkComplete = function() {
        if((new Date().getTime() - lastReceived > 300 && requestCount === responseCount) || new Date().getTime() - startTime > program.timeout) {
          clearInterval(checkCompleteInterval);

          page.evaluate(function(elem){
            return document.getElementsByTagName(elem)[0].innerHTML;
          }, function(err, result){
            callback(result);
            ph.exit();
          }, 'html');
        }
      };

      checkCompleteInterval = setInterval(checkComplete, 1);

      return page.open(url);
    });
  });
};

getFreshPage = function(res, url) {
  console.log('Getting a fresh page...');
  getContent(url, function(content) {
    if (program.writetofile) {
      writeToFile(url, content);
    }

    res.send(content);
  });
};

respond = function(req, res) {
  url = req.headers['x-original-uri'];
  if (!url) {
   res.status(404).send('Not found');
   return;
  }

  url = program.host + url;

  if (fileExists(url)) {
    filename = formatFilename(url);

    console.log('File exists, checking for staleness');

    if (fileIsStale(filename)) {
      return getFreshPage(res, url);
    }

    console.log('File exists and is not stale, reading from disk...');

    fs.readFile(filename, 'utf-8', function(err, content) {
      if (err) {
        res.status(500).send(err);
      } else {
        res.send(content);
      }
    });
  } else {
    getFreshPage(res, url);
  }
};

app.get('/*', respond);

configure();
app.listen(program.port);
console.log('Express server started on port %s', program.port);
